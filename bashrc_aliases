# docker aliases & functions
alias dps='docker ps'
alias drm='docker rm'
alias drmi='docker rmi'
alias drmall='docker rm -f $(docker ps -a -q)'
alias drmiall='docker rmi -f $(docker images -q)'

docker-reset() {
    drmall
    drmiall
}

# git prompt
GIT_PS1_SHOWDIRTYSTATE='True'
source ~/.git-prompt.sh
PROMPT_COMMAND='__git_ps1 "\w\[\033[0;36m\]" "\[\033[m\]\\\$ "'
PROMPT_COMMAND="$PROMPT_COMMAND"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

# git aliases
alias gbranch="git branch | sed -n 's/^\* //p'"
alias gpushremote='git push -u origin $(gbranch)'

# create and activate a new virtualenv in the current directory
mkvenv() {
    PY_VERSION=${1:-"3.6"}
    VENV_DIR=${HOME}/.venvs/${PWD##*/}/${PY_VERSION}
    if [ ! -d $VENV_DIR ];
    then
        PYTHON_BINARY=$(which "python${PY_VERSION}_user")
        if [ -z $PYTHON_BINARY ]
        then
            echo "unknown python version: ${PY_VERSION}"
            return 1
        fi

        virtualenv -p "${PYTHON_BINARY}" "${VENV_DIR}"

        source ${VENV_DIR}/bin/activate

        pip install --upgrade pip > /dev/null

        if [ -e ./requirements-dev.txt ];
        then
            pip install -r requirements-dev.txt
        elif [ -e ./requirements.txt ];
        then
            pip install -r requirements.txt
        fi
    else
        source ${VENV_DIR}/bin/activate
    fi
}

# activate a venv and version, name defaults to current dir name, version defaults to 3.6
avenv() {
    VENV_NAME=${1:-${PWD##*/}}
    PY_VERSION=${2:-"3.6"}
    VENV_DIR=${HOME}/.venvs/${VENV_NAME}/${PY_VERSION}
    if [ -d ${VENV_DIR} ];
    then
        source ${VENV_DIR}/bin/activate
    else
        echo "no venv at ${VENV_DIR}"
        return 1
    fi
}

rmvenv() {
    PY_VERSION=${1:-"3.6"}
    VENV_DIR=${HOME}/.venvs/${PWD##*/}/${PY_VERSION}
    if [ -d ${VENV_DIR} ];
    then
        if type deactivate > /dev/null;
        then
            deactivate
        fi
        rm -r ${VENV_DIR}
    fi
}

# path
export PATH=$HOME/.local/bin:$PATH

# virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/git
export VIRTUALENVWRAPPER_PYTHON=$(which python3)
source $(which virtualenvwrapper.sh)

# golang
export GOPATH=$HOME/go

# node
export NVM_DIR=$HOME/.nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# path
export PATH=$HOME/bin:$PATH:$GOPATH/bin:/usr/local/go/bin

ec2ip() {
    INSTANCE_ID=${1}
    if [ ! $INSTANCE_ID ]
    then
        echo "no istance id specified"
        return 1
    fi

    EC2_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} |\
             jq --raw-output '.Reservations[0].Instances[0].NetworkInterfaces[0].PrivateIpAddress')
    echo $EC2_IP
}

ec2ssh() {
    EC2_IP=$(ec2ip ${1})
    if [ $? -ne 0 ]
    then
        echo "failed to get instance id"
        return 1
    fi
    ssh $EC2_IP
}
